{"version":3,"sources":["../../../src/scripts/init/index.js"],"names":["require","existsSync","exec","inquirer","rimraf","sync","which","chalk","spin","DATA","cloneFinished","cwdPath","process","cwd","errConsole","msg","console","log","red","exit","cloneProject","templateName","projectName","Promise","resolve","nothrow","loading","start","timeout","err","green","stop","newProject","module","exports","prompt","TEMPCHOICE","answers","template"],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\nconst { existsSync } = require('fs');\nconst { exec } = require('child_process');\nconst inquirer = require('inquirer');\nconst rimraf = require('rimraf').sync;\nconst which = require('which');\nconst chalk = require('chalk');\nconst spin = require('ora');\nconst DATA = require('../../doc/interaction');\nconst cloneFinished = require('./cloneFinished');\n\nconst cwdPath = process.cwd(); //需要获得命令执行的位置\n\nfunction errConsole(msg) {\n  console.log(chalk.red(msg));\n  process.exit(0);\n}\n\nfunction cloneProject({ templateName, projectName }) {\n  return new Promise(resolve => {\n    const cwd = `${cwdPath}/${projectName}`;\n    if (which.sync('git', { nothrow: true })) {\n      const loading = spin('clone start...');\n      loading.start();\n      exec(\n        `git clone https://github.com/zhaozeq/init_${templateName}_project.git ${projectName}`,\n        { cwd: cwdPath, timeout: 10000 },\n        err => {\n          if (err) {\n            console.log(`\\n${err}`);\n            errConsole(`\\n ${templateName}模板获取失败`);\n          }\n          // 删除.git文件\n          rimraf(`${cwd}/.git`);\n          console.log(\n            chalk.green(`\\n  ${templateName} template project has cloned!`),\n          );\n          loading.stop();\n          resolve();\n        },\n      );\n    } else {\n      errConsole(\n        '\\n 检测到您未安装git,请安装后重试(地址：https://git-scm.com/downloads)',\n      );\n    }\n  });\n}\n\n/**\n * @param {array} argvs\n *  projectName: 项目名称\n *  type 模板类型\n */\nasync function newProject([projectName, templateName]) {\n  await cloneProject({ templateName, projectName });\n  cloneFinished(projectName);\n}\n\nmodule.exports = async function(projectName) {\n  if (existsSync(projectName)) {\n    errConsole(` 当前目录已存在名为${projectName}的文件夹,请处理`);\n  }\n  /* 询问模板类型 */\n  const answers = await inquirer.prompt(DATA.TEMPCHOICE);\n  /* 创建项目 */\n  newProject([projectName, answers.template]);\n};\n"],"file":"index.js"}