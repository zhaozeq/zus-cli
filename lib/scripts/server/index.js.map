{"version":3,"sources":["../../../src/scripts/server/index.js"],"names":["debug","require","fork","usedPorts","start","scriptPath","execArgv","process","slice","inspectArgvIndex","findIndex","argv","includes","inspectArgv","splice","replace","matchedStr","s1","port","parseInt","e","push","child","on","data","type","kill","send","JSON","stringify","code","exit","resolve"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,UAAjB,CAAd;;eACiBA,OAAO,CAAC,eAAD,C;IAAhBC,I,YAAAA,I;;AAER,IAAMC,SAAS,GAAG,EAAlB;AACA;;AACA,SAASC,KAAT,CAAeC,UAAf,EAA2B;AACzB;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACD,QAAR,CAAiBE,KAAjB,CAAuB,CAAvB,CAAjB;AACA,MAAMC,gBAAgB,GAAGH,QAAQ,CAACI,SAAT,EACvB;AACA,YAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,QAAL,CAAc,eAAd,CAAJ;AAAA,GAFmB,CAAzB,CAHyB,CAQzB;;AACA,MAAIH,gBAAgB,GAAG,CAAC,CAAxB,EAA2B;AACzB,QAAMI,WAAW,GAAGP,QAAQ,CAACG,gBAAD,CAA5B;AACAH,IAAAA,QAAQ,CAACQ,MAAT,CACEL,gBADF,EAEE,CAFF,EAGEI,WAAW,CAACE,OAAZ,CAAoB,oBAApB,EAA0C,UAACC,UAAD,EAAaC,EAAb,EAAoB;AAC5D,UAAIC,IAAJ;;AACA,UAAI;AACFA,QAAAA,IAAI,GAAGC,QAAQ,CAACF,EAAD,EAAK,EAAL,CAAR,GAAmB,CAA1B;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACVF,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,UAAIf,SAAS,CAACS,QAAV,CAAmBM,IAAnB,CAAJ,EAA8B;AAC5BA,QAAAA,IAAI,IAAI,CAAR;AACD;;AACDf,MAAAA,SAAS,CAACkB,IAAV,CAAeH,IAAf;AACA,qCAAwBA,IAAxB;AACD,KAZD,CAHF;AAiBD;;AAED,MAAMI,KAAK,GAAGpB,IAAI,CAACG,UAAD,EAAaE,OAAO,CAACI,IAAR,CAAaH,KAAb,CAAmB,CAAnB,CAAb,EAAoC;AAAEF,IAAAA,QAAQ,EAARA;AAAF,GAApC,CAAlB;AAEAgB,EAAAA,KAAK,CAACC,EAAN,CAAS,SAAT,EAAoB,UAAAC,IAAI,EAAI;AAC1B,QAAMC,IAAI,GAAID,IAAI,IAAIA,IAAI,CAACC,IAAd,IAAuB,IAApC;;AACA,QAAIA,IAAI,KAAK,SAAb,EAAwB;AACtBH,MAAAA,KAAK,CAACI,IAAN;AACAtB,MAAAA,KAAK,CAACC,UAAD,CAAL;AACD;;AACD,QAAIE,OAAO,CAACoB,IAAZ,EAAkB;AAChB3B,MAAAA,KAAK,gBAAS4B,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAT,EAAL;AACAjB,MAAAA,OAAO,CAACoB,IAAR,CAAaH,IAAb,EAFgB,CAEI;AACrB;AACF,GAVD;AAWAF,EAAAA,KAAK,CAACC,EAAN,CAAS,MAAT,EAAiB,UAAAO,IAAI,EAAI;AACvB,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACdvB,MAAAA,OAAO,CAACwB,IAAR,CAAaD,IAAb;AACD;AACF,GAJD;AAMAvB,EAAAA,OAAO,CAACgB,EAAR,CAAW,QAAX,EAAqB,YAAM;AACzBD,IAAAA,KAAK,CAACI,IAAN,CAAW,QAAX;AACD,GAFD;AAIA,SAAOJ,KAAP;AACD;;AAEDlB,KAAK,CAACH,OAAO,CAAC+B,OAAR,CAAgB,cAAhB,CAAD,CAAL","sourcesContent":["const debug = require('debug')('zus:send');\nconst { fork } = require('child_process');\n\nconst usedPorts = [];\n/* fork 中端口处理 */\nfunction start(scriptPath) {\n  //  调用node的所传入的一些特殊参数(http://nodejs.cn/api/process.html#process_process_execargv)\n  const execArgv = process.execArgv.slice(0);\n  const inspectArgvIndex = execArgv.findIndex(\n    // node --inspect-brk=9229  9229默认ws通信端口 '-brk' 设置断点\n    argv => argv.includes('--inspect-brk'),\n  );\n\n  // 端口操作\n  if (inspectArgvIndex > -1) {\n    const inspectArgv = execArgv[inspectArgvIndex];\n    execArgv.splice(\n      inspectArgvIndex,\n      1,\n      inspectArgv.replace(/--inspect-brk=(.*)/, (matchedStr, s1) => {\n        let port;\n        try {\n          port = parseInt(s1, 10) + 1;\n        } catch (e) {\n          port = 9230;\n        }\n        if (usedPorts.includes(port)) {\n          port += 1;\n        }\n        usedPorts.push(port);\n        return `--inspect-brk=${port}`;\n      }),\n    );\n  }\n\n  const child = fork(scriptPath, process.argv.slice(2), { execArgv });\n\n  child.on('message', data => {\n    const type = (data && data.type) || null;\n    if (type === 'RESTART') {\n      child.kill();\n      start(scriptPath);\n    }\n    if (process.send) {\n      debug(`send ${JSON.stringify(data)}`);\n      process.send(data); // 向父进程发送消息\n    }\n  });\n  child.on('exit', code => {\n    if (code === 1) {\n      process.exit(code);\n    }\n  });\n\n  process.on('SIGINT', () => {\n    child.kill('SIGINT');\n  });\n\n  return child;\n}\n\nstart(require.resolve('./realDev.js'));\n"],"file":"index.js"}