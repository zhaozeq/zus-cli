{"version":3,"sources":["../../../src/utils/webpack/socket.js"],"names":["SockJS","require","connectServer","showLoading","retries","sock","socket","initSocket","url","handlers","onopen","onmessage","onclose","retryInMs","Math","pow","random","setTimeout","console","log","window","location","reload","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAAtB;;eACuCA,OAAO,CAAC,mBAAD,C;IAAtCC,a,YAAAA,a;IAAeC,W,YAAAA,W;;AAEvB,IAAIC,OAAO,GAAG,CAAd;AACA,IAAIC,IAAI,GAAG,IAAX;;AAEA,IAAMC,MAAM,GAAG,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,QAAzB,EAAmC;AAChDJ,EAAAA,IAAI,GAAG,IAAIL,MAAJ,CAAWQ,GAAX,CAAP;;AAEAH,EAAAA,IAAI,CAACK,MAAL,GAAc,SAASA,MAAT,GAAkB;AAC9BN,IAAAA,OAAO,GAAG,CAAV;AACD,GAFD;;AAIAC,EAAAA,IAAI,CAACM,SAAL,GAAiBF,QAAQ,CAACE,SAA1B;;AAEAN,EAAAA,IAAI,CAACO,OAAL,GAAe,SAASA,OAAT,GAAmB;AAChC,QAAIR,OAAO,KAAK,CAAhB,EAAmB;AACjBK,MAAAA,QAAQ,CAACG,OAAT;AACD,KAH+B,CAKhC;;;AACAP,IAAAA,IAAI,GAAG,IAAP,CANgC,CAQhC;;AACA,QAAID,OAAO,GAAG,CAAd,EAAiB;AACf;AACA;AACA;AACA,UAAMS,SAAS,GAAG,OAAOC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYX,OAAZ,CAAP,GAA8BU,IAAI,CAACE,MAAL,KAAgB,GAAhE;AACAZ,MAAAA,OAAO,IAAI,CAAX;AAEAa,MAAAA,UAAU,CAAC,YAAM;AACfX,QAAAA,MAAM,CAACE,GAAD,EAAMC,QAAN,CAAN;AACD,OAFS,EAEPI,SAFO,CAAV;AAGD,KAVD,MAUO;AACLV,MAAAA,WAAW;AACXD,MAAAA,aAAa,CAAC,YAAM;AAClBgB,QAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ,EAAoB,SAApB;AACAA,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,OAHY,CAAb;AAID;AACF,GA1BD;AA2BD,CApCD;;AAsCAC,MAAM,CAACC,OAAP,GAAiBlB,MAAjB","sourcesContent":["const SockJS = require('sockjs-client');\nconst { connectServer, showLoading } = require('./patchConnection');\n\nlet retries = 0;\nlet sock = null;\n\nconst socket = function initSocket(url, handlers) {\n  sock = new SockJS(url);\n\n  sock.onopen = function onopen() {\n    retries = 0;\n  };\n\n  sock.onmessage = handlers.onmessage;\n\n  sock.onclose = function onclose() {\n    if (retries === 0) {\n      handlers.onclose();\n    }\n\n    // Try to reconnect.\n    sock = null;\n\n    // After 10 retries stop trying, to prevent logspam.\n    if (retries < 1) {\n      // Exponentially increase timeout to reconnect.\n      // Respectfully copied from the package `got`.\n      // eslint-disable-next-line no-mixed-operators, no-restricted-properties\n      const retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n      retries += 1;\n\n      setTimeout(() => {\n        socket(url, handlers);\n      }, retryInMs);\n    } else {\n      showLoading();\n      connectServer(() => {\n        console.log(window, 'window2');\n        window.location.reload();\n      });\n    }\n  };\n};\n\nmodule.exports = socket;\n"],"file":"socket.js"}