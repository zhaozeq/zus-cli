{"version":3,"sources":["../../../src/utils/webpack/prepareUrls.js"],"names":["prepareUrls","protocol","host","port","pathname","formatUrl","hostname","url","format","prettyPrintUrl","chalk","bold","isUnspecifiedHost","prettyHost","lanUrlForConfig","lanUrlForTerminal","address","ip","test","undefined","_e","localUrlForTerminal","localUrlForBrowser"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAHA;AAKe,SAASA,WAAT,CAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,QAA3C,EAAqD;AAClE,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ;AAAA,WACxBC,gBAAIC,MAAJ,CAAW;AACTP,MAAAA,QAAQ,EAARA,QADS;AAETK,MAAAA,QAAQ,EAARA,QAFS;AAGTH,MAAAA,IAAI,EAAJA,IAHS;AAITC,MAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAJb,KAAX,CADwB;AAAA,GAA1B;;AAOA,MAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAAAH,QAAQ;AAAA,WAC7BC,gBAAIC,MAAJ,CAAW;AACTP,MAAAA,QAAQ,EAARA,QADS;AAETK,MAAAA,QAAQ,EAARA,QAFS;AAGTH,MAAAA,IAAI,EAAEO,kBAAMC,IAAN,CAAWR,IAAX,CAHG;AAITC,MAAAA,QAAQ,EAAEA,QAAQ,IAAI;AAJb,KAAX,CAD6B;AAAA,GAA/B;;AAQA,MAAMQ,iBAAiB,GAAGV,IAAI,KAAK,SAAT,IAAsBA,IAAI,KAAK,IAAzD;AACA,MAAIW,UAAJ,EAAgBC,eAAhB,EAAiCC,iBAAjC;;AACA,MAAIH,iBAAJ,EAAuB;AACrBC,IAAAA,UAAU,GAAG,WAAb;;AACA,QAAI;AACF;AACAC,MAAAA,eAAe,GAAGE,oBAAQC,EAAR,EAAlB,CAFE,CAE6B;;AAC/B,UAAIH,eAAJ,EAAqB;AACnB;AACA;AACA,YACE,+DAA+DI,IAA/D,CACEJ,eADF,CADF,EAIE;AACA;AACAC,UAAAA,iBAAiB,GAAGN,cAAc,CAACK,eAAD,CAAlC;AACD,SAPD,MAOO;AACL;AACAA,UAAAA,eAAe,GAAGK,SAAlB;AACD;AACF;AACF,KAlBD,CAkBE,OAAOC,EAAP,EAAW,CACX;AACD;AACF,GAvBD,MAuBO;AACLP,IAAAA,UAAU,GAAGX,IAAb;AACD;;AACD,MAAMmB,mBAAmB,GAAGZ,cAAc,CAACI,UAAD,CAA1C;AACA,MAAMS,kBAAkB,GAAGjB,SAAS,CAACQ,UAAD,CAApC;AACA,SAAO;AACLC,IAAAA,eAAe,EAAfA,eADK;AACY;AACjBC,IAAAA,iBAAiB,EAAjBA,iBAFK;AAEc;AACnBM,IAAAA,mBAAmB,EAAnBA,mBAHK;AAGgB;AACrBC,IAAAA,kBAAkB,EAAlBA,kBAJK,CAIc;;AAJd,GAAP;AAMD","sourcesContent":["/* eslint-disable */\nimport address from 'address'\nimport url from 'url'\nimport chalk from 'chalk'\n\nexport default function prepareUrls(protocol, host, port, pathname) {\n  const formatUrl = hostname =>\n    url.format({\n      protocol,\n      hostname,\n      port,\n      pathname: pathname || '/'\n    })\n  const prettyPrintUrl = hostname =>\n    url.format({\n      protocol,\n      hostname,\n      port: chalk.bold(port),\n      pathname: pathname || '/'\n    })\n\n  const isUnspecifiedHost = host === '0.0.0.0' || host === '::'\n  let prettyHost, lanUrlForConfig, lanUrlForTerminal\n  if (isUnspecifiedHost) {\n    prettyHost = 'localhost'\n    try {\n      // This can only return an IPv4 address\n      lanUrlForConfig = address.ip() // 获取ip地址\n      if (lanUrlForConfig) {\n        // Check if the address is a private ip\n        // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n        if (\n          /^10[.]|^30[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(\n            lanUrlForConfig\n          )\n        ) {\n          // Address is private, format it for later use\n          lanUrlForTerminal = prettyPrintUrl(lanUrlForConfig)\n        } else {\n          // Address is not private, so we will discard it\n          lanUrlForConfig = undefined\n        }\n      }\n    } catch (_e) {\n      // ignored\n    }\n  } else {\n    prettyHost = host\n  }\n  const localUrlForTerminal = prettyPrintUrl(prettyHost)\n  const localUrlForBrowser = formatUrl(prettyHost)\n  return {\n    lanUrlForConfig, // ip 地址\n    lanUrlForTerminal, // network 地址\n    localUrlForTerminal, // local 链接加粗port\n    localUrlForBrowser // local 链接\n  }\n}\n"],"file":"prepareUrls.js"}